name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm run install-all
        
    - name: Build frontend
      run: |
        cd frontend/auralis-transcriptor-frontend
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          frontend/auralis-transcriptor-frontend/dist/
          backend/
          package.json
          vercel.json
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Deploy to Vercel (Staging)
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Deployed to staging: ${{ steps.deploy.outputs.preview-url }}`
          })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://auralis-transcriptor.vercel.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Deploy to Vercel (Production)
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ðŸš€ Production deployment successful!
          
          **Deployed to:** https://auralis-transcriptor.vercel.app
          **Commit:** ${{ github.sha }}
          
          ## Changes
          See the [commit history](https://github.com/${{ github.repository }}/commits/${{ github.ref }}) for details.
        draft: false
        prerelease: false

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
    - name: Wait for deployment
      run: sleep 30
      
    - name: Check production health
      run: |
        curl -f https://auralis-transcriptor.vercel.app/api/health || exit 1
        
    - name: Check frontend accessibility
      run: |
        curl -f https://auralis-transcriptor.vercel.app || exit 1

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, health-check]
    if: always() && (needs.deploy-production.result == 'failure' || needs.health-check.result == 'failure')
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Deployment failed, initiating rollback..."
        # Add rollback logic here
        
    - name: Notify team
      run: |
        echo "Notifying team of deployment failure and rollback..."
        # Add notification logic here

