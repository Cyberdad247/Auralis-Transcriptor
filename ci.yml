name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run backend linting
      run: |
        cd backend
        npm run lint || echo "Linting not configured"
        
    - name: Run backend tests
      run: |
        cd backend
        npm test
        
    - name: Generate backend coverage report
      run: |
        cd backend
        npm run test:coverage || npm test -- --coverage
        
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/auralis-transcriptor-frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend/auralis-transcriptor-frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend/auralis-transcriptor-frontend
        npm run lint
        
    - name: Run frontend tests
      run: |
        cd frontend/auralis-transcriptor-frontend
        npm test
        
    - name: Generate frontend coverage report
      run: |
        cd frontend/auralis-transcriptor-frontend
        npm run test:coverage
        
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/auralis-transcriptor-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/auralis-transcriptor-frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend/auralis-transcriptor-frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend/auralis-transcriptor-frontend
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/auralis-transcriptor-frontend/dist/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Run npm audit for backend
      run: |
        cd backend
        npm audit --audit-level=high
        
    - name: Run npm audit for frontend
      run: |
        cd frontend/auralis-transcriptor-frontend
        npm audit --audit-level=high

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auralis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend/auralis-transcriptor-frontend && npm ci
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auralis_test
        NODE_ENV: test
        JWT_SECRET: test-secret
      run: |
        cd backend
        npm run test:integration || echo "Integration tests not configured"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, build-frontend, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, build-frontend, security-scan, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
      run: |
        echo "Deployment successful!"
        
    - name: Notify failure
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "Deployment failed!"
        exit 1

